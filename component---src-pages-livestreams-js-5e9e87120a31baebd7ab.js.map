{"version":3,"file":"component---src-pages-livestreams-js-5e9e87120a31baebd7ab.js","mappings":"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","sources":["webpack://icn-australia/./src/components/Livestream-library.js","webpack://icn-australia/./src/pages/livestreams.js"],"sourcesContent":["/** @jsxImportSource theme-ui */\nimport React from \"react\";\nimport { graphql, useStaticQuery } from \"gatsby\";\nimport { Grid, Box, Image, Heading, Text, Link, Flex } from \"theme-ui\";\n\nconst VideoGrid = ({ filterType }) => {\n  const data = useStaticQuery(graphql`\n    query {\n      allContentfulVideo {\n        nodes {\n          id\n          title\n          description {\n            description\n          }\n          thumbnail {\n            file {\n              url\n            }\n          }\n          video {\n            url\n          }\n          completed\n          startTime\n          link\n        }\n      }\n    }\n  `);\n\n  const videos = data.allContentfulVideo.nodes\n    .map((video) => ({\n      id: video.id,\n      title: video.title,\n      description: video.description?.description,\n      thumbnail: video.thumbnail?.file?.url\n        ? `https:${video.thumbnail.file.url}`\n        : \"/images/default-placeholder.webp\",\n      videoUrl: video.video?.url,\n      completed: video.completed,\n      startTime: video.startTime,\n      link: video.link,\n    }))\n    .filter((video) => {\n      if (filterType.upcoming && !video.completed) return true;\n      if (filterType.complete && video.completed) return true;\n      return false;\n    });\n\n  // Function to format the date and time\n  const formatDateTime = (dateTimeString) => {\n    if (!dateTimeString) return \"\"; // Handle missing startTime\n    const date = new Date(dateTimeString);\n    const formattedDate = date.toLocaleDateString(undefined, {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n    });\n    const formattedTime = date.toLocaleTimeString(undefined, {\n      hour: 'numeric',\n      minute: '2-digit',\n      hour12: true, // Use 12-hour format with AM/PM\n    });\n    return `${formattedDate}, ${formattedTime}`;\n  };\n\n  return (\n    <Grid columns={[1, 2, 3]} gap={4} sx={{ marginY: 4 }}>\n      {videos.map((video) => (\n        <Box\n          key={video.id}\n          sx={{\n            position: \"relative\",\n            borderRadius: 4,\n            overflow: \"hidden\",\n            boxShadow: \"0 2px 4px rgba(0,0,0,0.1)\",\n            transition: \"transform 0.2s ease-in-out\",\n            \"&:hover\": {\n              transform: \"translateY(-4px)\",\n            },\n            display: \"flex\",\n            flexDirection: \"column\",\n          }}\n        >\n          <Image\n            src={video.thumbnail}\n            alt={video.title}\n            sx={{\n              width: \"100%\",\n              height: \"auto\",\n              aspectRatio: \"16/9\",\n              objectFit: \"cover\",\n            }}\n          />\n          <Box\n            sx={{\n              padding: 3,\n              flexGrow: 1,\n              display: \"flex\",\n              flexDirection: \"column\",\n            }}\n          >\n            <Heading\n              as=\"h3\"\n              sx={{\n                fontSize: 2,\n                marginY: 2,\n                overflow: \"hidden\",\n                textOverflow: \"ellipsis\",\n                whiteSpace: \"nowrap\",\n              }}\n            >\n              {video.title}\n            </Heading>\n\n            {/* Conditional Rendering based on filterType */}\n            {filterType.upcoming && !video.completed && (\n              <>\n                <Text sx={{ fontSize: 1, color: \"gray.600\", fontWeight: \"bold\" }}>\n                  Starts at: {formatDateTime(video.startTime)} {/* Format date/time */}\n                </Text>\n                {video.link && (\n                  <Link\n                    href={video.link}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    sx={{\n                      display: \"block\",\n                      marginTop: \"auto\",\n                      color: \"primary\",\n                      textDecoration: \"none\",\n                      fontWeight: \"bold\",\n                      \"&:hover\": {\n                        textDecoration: \"underline\",\n                      },\n                    }}\n                  >\n                    Join Event\n                  </Link>\n                )}\n              </>\n            )}\n\n            {filterType.complete && video.completed && (\n              <>\n                <Text sx={{ fontSize: 1, color: \"gray.600\", fontWeight: \"bold\" }}>\n                  Streamed at: {formatDateTime(video.startTime)} {/* Format date/time */}\n                </Text>\n                <Text\n                  sx={{\n                    fontSize: 1,\n                    color: \"gray.600\",\n                    overflow: \"hidden\",\n                    textOverflow: \"ellipsis\",\n                    display: \"-webkit-box\",\n                    WebkitLineClamp: 2,\n                    WebkitBoxOrient: \"vertical\",\n                    marginBottom: 2,\n                  }}\n                >\n                  {video.description}\n                </Text>\n                {video.videoUrl && (\n                  <Link\n                    href={video.videoUrl}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    sx={{\n                      display: \"block\",\n                      marginTop: \"auto\",\n                      color: \"primary\",\n                      textDecoration: \"none\",\n                      fontWeight: \"bold\",\n                      \"&:hover\": {\n                        textDecoration: \"underline\",\n                      },\n                    }}\n                  >\n                    Watch Replay\n                  </Link>\n                )}\n              </>\n            )}\n          </Box>\n        </Box>\n      ))}\n    </Grid>\n  );\n};\n\nexport default VideoGrid;","/** @jsxImportSource theme-ui */\nimport { Box, Heading, Flex, Button } from \"theme-ui\";\nimport { useLocation } from \"@reach/router\";\nimport { useState, useEffect } from \"react\";\nimport Seo from \"../components/seo\";\nimport VideoGrid from \"../components/Livestream-library\";\n\nexport default function LivestreamsPage() {\n  const location = useLocation();\n  const params = new URLSearchParams(location.search);\n\n  // Read query parameters only on first load\n  const [isUpcoming, setIsUpcoming] = useState(params.has(\"upcoming\") || (!params.has(\"complete\") && !params.has(\"upcoming\")));\n  const [isComplete, setIsComplete] = useState(params.has(\"complete\") || (!params.has(\"complete\") && !params.has(\"upcoming\")));\n\n  // Ensure at least one filter is always active\n  useEffect(() => {\n    if (!isUpcoming && !isComplete) {\n      setIsUpcoming(true); // Default to Upcoming if both get turned off\n    }\n  }, [isUpcoming, isComplete]);\n\n  return (\n    <>\n      <Seo title=\"Livestreams\" description=\"Watch ICN Australia livestreams and videos\" />\n      <Box sx={{ padding: 4 }}>\n        <Heading as=\"h1\" sx={{ mb: 4 }}>Livestreams</Heading>\n\n        {/* Filter Buttons */}\n        <Flex sx={{ justifyContent: \"center\", gap: 3, mb: 4 }}>\n          <Button\n            onClick={() => setIsUpcoming(!isUpcoming)}\n            sx={{\n              backgroundColor: isUpcoming ? \"primary\" : \"#bbb\", // Forcing raw color values\n              color: \"white\",\n              padding: \"14px 28px\",\n              borderRadius: \"8px\",\n              cursor: \"pointer\",\n              fontSize: \"16px\",\n              fontWeight: \"bold\",\n              transition: \"background-color 0.3s ease-in-out\",\n              \"&:hover\": {\n                backgroundColor: isUpcoming ? \"primary\" : \"#999\",\n              },\n            }}\n          >\n            Upcoming\n          </Button>\n          <Button\n            onClick={() => setIsComplete(!isComplete)}\n            sx={{\n              backgroundColor: isComplete ? \"primary\" : \"#bbb\", // Forcing raw color values\n              color: \"white\",\n              padding: \"14px 28px\",\n              borderRadius: \"8px\",\n              cursor: \"pointer\",\n              fontSize: \"16px\",\n              fontWeight: \"bold\",\n              transition: \"background-color 0.3s ease-in-out\",\n              \"&:hover\": {\n                backgroundColor: isComplete ? \"primary\" : \"#999\",\n              },\n            }}\n          >\n            Completed\n          </Button>\n        </Flex>\n\n        {/* Video Grid */}\n        <VideoGrid filterType={{ upcoming: isUpcoming, complete: isComplete }} />\n      </Box>\n    </>\n  );\n}\n"],"names":["_ref","filterType","videos","useStaticQuery","allContentfulVideo","nodes","map","video","_video$description","_video$thumbnail","_video$thumbnail$file","_video$video","id","title","description","thumbnail","file","url","videoUrl","completed","startTime","link","filter","upcoming","complete","formatDateTime","dateTimeString","date","Date","toLocaleDateString","undefined","year","month","day","toLocaleTimeString","hour","minute","hour12","_jsx","Grid","columns","gap","sx","marginY","children","_jsxs","Box","position","borderRadius","overflow","boxShadow","transition","transform","display","flexDirection","Image","src","alt","width","height","aspectRatio","objectFit","padding","flexGrow","Heading","as","fontSize","textOverflow","whiteSpace","_Fragment","Text","color","fontWeight","Link","href","target","rel","marginTop","textDecoration","WebkitLineClamp","WebkitBoxOrient","marginBottom","LivestreamsPage","location","useLocation","params","URLSearchParams","search","isUpcoming","setIsUpcoming","useState","has","isComplete","setIsComplete","useEffect","Seo","mb","Flex","justifyContent","Button","onClick","backgroundColor","cursor","VideoGrid"],"sourceRoot":""}