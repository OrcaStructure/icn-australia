{"version":3,"file":"component---src-pages-livestreams-js-cec2c656512a0d101ed5.js","mappings":"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","sources":["webpack://icn-australia/./src/components/Livestream-library.js","webpack://icn-australia/./src/pages/livestreams.js"],"sourcesContent":["/** @jsxImportSource theme-ui */\nimport React from \"react\";\nimport { graphql, useStaticQuery } from \"gatsby\";\nimport { Grid, Box, Image, Heading, Text, Link } from \"theme-ui\";\n\nconst VideoGrid = ({ filterType }) => {\n  const data = useStaticQuery(graphql`\n    query {\n      allContentfulVideo {\n        nodes {\n          id\n          title\n          description {\n            description\n          }\n          thumbnail {\n            file {\n              url\n            }\n          }\n          video {\n            url\n          }\n          completed\n          startTime\n          link\n        }\n      }\n    }\n  `);\n\n  // Process and filter videos based on filterType\n  const videos = data.allContentfulVideo.nodes\n    .map((video) => ({\n      id: video.id,\n      title: video.title,\n      description: video.description?.description,\n      thumbnail: video.thumbnail?.file.url ? `https:${video.thumbnail.file.url}` : \"/images/default-placeholder.webp\",\n      slug: video.video?.url,\n      completed: video.completed,\n      startTime: video.startTime,\n      link: video.link,\n    }))\n    .filter((video) => {\n      if (filterType.upcoming && !video.completed) return true; // Show uncompleted ones\n      if (filterType.complete && video.completed) return true; // Show completed ones\n      return false;\n    });\n\n  return (\n    <Grid columns={[1, 2, 3]} gap={4} sx={{ marginY: 4 }}>\n      {videos.map((video) => (\n        <Box\n          key={video.id}\n          sx={{\n            position: \"relative\",\n            borderRadius: 4,\n            overflow: \"hidden\",\n            boxShadow: \"0 2px 4px rgba(0,0,0,0.1)\",\n            transition: \"transform 0.2s ease-in-out\",\n            \"&:hover\": {\n              transform: \"translateY(-4px)\",\n            },\n          }}\n        >\n          <Image\n            src={video.thumbnail}\n            alt={video.title}\n            sx={{\n              width: \"100%\",\n              height: \"auto\",\n              aspectRatio: \"16/9\",\n              objectFit: \"cover\",\n            }}\n          />\n          <Box sx={{ padding: 3 }}>\n            <Heading\n              as=\"h3\"\n              sx={{\n                fontSize: 2,\n                marginY: 2,\n                overflow: \"hidden\",\n                textOverflow: \"ellipsis\",\n                whiteSpace: \"nowrap\",\n              }}\n            >\n              {video.title}\n            </Heading>\n            \n            {filterType.upcoming && !video.completed ? (\n              <>\n                <Text sx={{ fontSize: 1, color: \"gray.600\", fontWeight: \"bold\" }}>\n                  Starts at: {video.startTime}\n                </Text>\n                {video.link && (\n                  <Link\n                    href={video.link}\n                    target=\"_blank\"\n                    sx={{\n                      display: \"block\",\n                      marginTop: 2,\n                      color: \"blue\",\n                      textDecoration: \"underline\",\n                    }}\n                  >\n                    Watch Now\n                  </Link>\n                )}\n              </>\n            ) : filterType.complete && video.completed ? (\n              <Text\n                sx={{\n                  fontSize: 1,\n                  color: \"gray.600\",\n                  overflow: \"hidden\",\n                  textOverflow: \"ellipsis\",\n                  display: \"-webkit-box\",\n                  WebkitLineClamp: 2,\n                  WebkitBoxOrient: \"vertical\",\n                }}\n              >\n                {video.description}\n              </Text>\n            ) : null}\n          </Box>\n        </Box>\n      ))}\n    </Grid>\n  );\n};\n\nexport default VideoGrid;\n","/** @jsxImportSource theme-ui */\nimport { Box, Heading, Flex, Button } from \"theme-ui\";\nimport { useLocation } from \"@reach/router\";\nimport { useState, useEffect } from \"react\";\nimport Seo from \"../components/seo\";\nimport VideoGrid from \"../components/Livestream-library\";\n\nexport default function LivestreamsPage() {\n  const location = useLocation();\n  const params = new URLSearchParams(location.search);\n\n  // Read query parameters only on first load\n  const [isUpcoming, setIsUpcoming] = useState(params.has(\"upcoming\") || (!params.has(\"complete\") && !params.has(\"upcoming\")));\n  const [isComplete, setIsComplete] = useState(params.has(\"complete\") || (!params.has(\"complete\") && !params.has(\"upcoming\")));\n\n  // Ensure at least one filter is always active\n  useEffect(() => {\n    if (!isUpcoming && !isComplete) {\n      setIsUpcoming(true); // Default to Upcoming if both get turned off\n    }\n  }, [isUpcoming, isComplete]);\n\n  return (\n    <>\n      <Seo title=\"Livestreams\" description=\"Watch ICN Australia livestreams and videos\" />\n      <Box sx={{ padding: 4 }}>\n        <Heading as=\"h1\" sx={{ mb: 4 }}>Livestreams</Heading>\n\n        {/* Filter Buttons */}\n        <Flex sx={{ justifyContent: \"center\", gap: 3, mb: 4 }}>\n          <Button\n            onClick={() => setIsUpcoming(!isUpcoming)}\n            sx={{\n              backgroundColor: isUpcoming ? \"primary\" : \"#bbb\", // Forcing raw color values\n              color: \"white\",\n              padding: \"14px 28px\",\n              borderRadius: \"8px\",\n              cursor: \"pointer\",\n              fontSize: \"16px\",\n              fontWeight: \"bold\",\n              transition: \"background-color 0.3s ease-in-out\",\n              \"&:hover\": {\n                backgroundColor: isUpcoming ? \"primary\" : \"#999\",\n              },\n            }}\n          >\n            Upcoming\n          </Button>\n          <Button\n            onClick={() => setIsComplete(!isComplete)}\n            sx={{\n              backgroundColor: isComplete ? \"primary\" : \"#bbb\", // Forcing raw color values\n              color: \"white\",\n              padding: \"14px 28px\",\n              borderRadius: \"8px\",\n              cursor: \"pointer\",\n              fontSize: \"16px\",\n              fontWeight: \"bold\",\n              transition: \"background-color 0.3s ease-in-out\",\n              \"&:hover\": {\n                backgroundColor: isComplete ? \"primary\" : \"#999\",\n              },\n            }}\n          >\n            Completed\n          </Button>\n        </Flex>\n\n        {/* Video Grid */}\n        <VideoGrid filterType={{ upcoming: isUpcoming, complete: isComplete }} />\n      </Box>\n    </>\n  );\n}\n"],"names":["_ref","filterType","videos","useStaticQuery","allContentfulVideo","nodes","map","video","_video$description","_video$thumbnail","_video$video","id","title","description","thumbnail","file","url","slug","completed","startTime","link","filter","upcoming","complete","_jsx","Grid","columns","gap","sx","marginY","children","_jsxs","Box","position","borderRadius","overflow","boxShadow","transition","transform","Image","src","alt","width","height","aspectRatio","objectFit","padding","Heading","as","fontSize","textOverflow","whiteSpace","_Fragment","Text","color","fontWeight","Link","href","target","display","marginTop","textDecoration","WebkitLineClamp","WebkitBoxOrient","LivestreamsPage","location","useLocation","params","URLSearchParams","search","isUpcoming","setIsUpcoming","useState","has","isComplete","setIsComplete","useEffect","Seo","mb","Flex","justifyContent","Button","onClick","backgroundColor","cursor","VideoGrid"],"sourceRoot":""}